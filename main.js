/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ExamplePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_fs = __toESM(require("fs"));
var ExamplePlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerEvent(
      this.app.vault.on("create", (file) => {
        if (!(file instanceof import_obsidian.TFile))
          return;
        const timeGapMs = new Date().getTime() - file.stat.ctime;
        if (timeGapMs > 1e3)
          return;
        if (isMarkdownFile(file))
          return;
        if (isImage(file)) {
          this.startImagePastingManagementProcess(file);
        } else {
          if (this.settings.handleAllAttachments) {
            if (this.testExcludeExtension(file)) {
              return;
            }
            this.startImagePastingManagementProcess(file);
          }
        }
      })
    );
  }
  async startImagePastingManagementProcess(file) {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new Notice("Error: No active file found.");
      return;
    }
    var vaultAbsPath = this.app.vault.adapter.basePath;
    var activeFilePath = activeFile.parent.path;
    if (activeFilePath === "/") {
      activeFilePath = "";
    }
    var noteImageDir = activeFile.name.trim().replace(".md", "").replace(/\s+/g, "_") + "_images";
    var absNoteImageDir = vaultAbsPath + "/" + activeFilePath + "/" + noteImageDir;
    if (!import_fs.default.existsSync(absNoteImageDir)) {
      import_fs.default.mkdirSync(absNoteImageDir, 484);
    }
    var relativeNoteImagePath = activeFilePath + "/" + noteImageDir;
    var fileName = file.basename + "_" + Date.now().toString(36) + "." + file.extension;
    this.saveFile(file, fileName, activeFile.path, relativeNoteImagePath);
  }
  async saveFile(file, inputNewName, sourcePath, imagePath) {
    const linkText = this.app.fileManager.generateMarkdownLink(file, sourcePath);
    const newPath = imagePath + "/" + inputNewName;
    try {
      await this.app.fileManager.renameFile(file, newPath);
    } catch (err) {
      new Notice(`Error: ${err}`);
      throw err;
    }
    const newLinkText = this.app.fileManager.generateMarkdownLink(file, sourcePath);
    const view = this.app.workspace.getActiveFileView(import_obsidian.MarkdownView);
    if (view) {
      const cursor = view.editor.getCursor();
      const line = view.editor.getLine(cursor.line);
      const replacedLine = line.replace(linkText, newLinkText);
      view.editor.transaction({
        changes: [
          {
            from: { ...cursor, ch: 0 },
            to: { ...cursor, ch: line.length },
            text: replacedLine
          }
        ]
      });
    } else {
      new Notice(`Failed to rename ${newName}: no active editor`);
      return;
    }
  }
};
function isMarkdownFile(file) {
  if (file instanceof import_obsidian.TFile) {
    if (file.extension === "md") {
      return true;
    }
  }
  return false;
}
var IMAGE_EXTS = [
  "jpg",
  "jpeg",
  "png",
  "gif",
  "bmp",
  "svg"
];
function isImage(file) {
  if (file instanceof import_obsidian.TFile) {
    if (IMAGE_EXTS.contains(file.extension.toLowerCase())) {
      return true;
    }
  }
  return false;
}
//# sourceMappingURL=data:application/json;base64,
